{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Box","styled","div","KeyBox","props","color","left","JaLetter","JaLeft","JaRight","JaBase","JA_LETTER_SIZE","EnLetter","JA_LETTER_FONTSIZE","BORDER_WIDTH","EnShift","EnBase","EnSpan","span","Row","getLetter","xs","i","charAt","KEY_COLOR","makeRow","top","keys","style","map","x","keytop","makeKeyBox","App","useState","rowData","setRowData","offsets","rows","margin","onChange","e","console","log","target","value","JSON","parse","marginTop","width","height","fontSize","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yhDAKA,IAEMA,EAAMC,IAAOC,IAAV,IAFY,EACA,QAOfC,EAASF,YAAOD,EAAPC,CAAH,IADgB,OAKd,SAAAG,GAAK,OAAIA,EAAMC,SACrB,SAAAD,GAAK,OAAIA,EAAME,QAOjBC,EAAWN,IAAOC,IAAV,IAHa,GADJ,OAWjBM,EAASP,YAAOM,EAAPN,CAAH,KACL,GAGDQ,EAAUR,YAAOM,EAAPN,CAAH,KACN,EAhBgB,IAmBjBS,EAAST,YAAOM,EAAPN,CAAH,IACLU,GACCA,IAIFC,EAAWX,IAAOC,IAAV,IACDW,GAEJF,GACCA,GACMG,GA7CK,QAgDfC,EAAUd,YAAOW,EAAPX,CAAH,IAjCU,GAmCfU,IAEFK,EAASf,YAAOW,EAAPX,CAAH,IACLU,GACCA,IAEFM,EAAShB,IAAOiB,KAAV,KAEL,EAEEP,IAGHQ,EAAMlB,IAAOC,IAAV,IAzDmB,IA6DtBkB,EAAY,SAACC,EAAyBC,GAC1C,MAAkB,kBAAPD,EACFA,EAAGE,OAAOD,GAEZD,EAAGC,IAeNE,EAAY,CAChB,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAG7FC,EAAU,SAACC,EAAapB,EAAcqB,GAC1C,OACE,kBAACR,EAAD,CAAKS,MAAO,CAAEF,IAAKA,IAChBC,EAAKE,KAAI,SAACC,EAAGR,GAAJ,OAnBG,SAAChB,EAAcyB,EAAgB1B,GAChD,OACE,kBAACF,EAAD,CAAQG,KAAMA,EAAMD,MAAOA,GACzB,kBAACG,EAAD,KAASY,EAAUW,EAAQ,IAC3B,kBAACtB,EAAD,KAAUW,EAAUW,EAAQ,IAC5B,kBAACrB,EAAD,KAASU,EAAUW,EAAQ,IAC3B,kBAAChB,EAAD,KAAS,kBAACE,EAAD,KAASG,EAAUW,EAAQ,KACpC,kBAACf,EAAD,KAAQ,kBAACC,EAAD,KAASG,EAAUW,EAAQ,MAYdC,CAvFC,GAuFgCV,EAAIhB,EAAMwB,EAAGN,EAAUF,SAoDpEW,EA/CO,WAAO,IAAD,EACIC,mBAC5B,CACE,CACE,uBAAS,kBAAS,kBAAS,aAAS,aAAS,aAAS,kBAAS,kBAAS,kBAAS,kBAAS,aAAS,SAAU,IAE/G,CACE,aAAS,kBAAS,kBAAS,kBAAS,kBAAS,aAAS,uBAAS,kBAAS,kBAAS,kBAAS,gBAAO,IAEnG,CACE,kBAAS,kBAAS,kBAAS,kBAAS,kBAAS,aAAS,kBAAS,kBAAS,kBAAS,uBAAS,kBAAS,eAErG,CACE,kBAAS,kBAAS,kBAAS,kBAAS,kBAAS,aAAS,uBAAS,kBAAS,uBAAS,uBAAS,qBAbtE,mBACnBC,EADmB,KACVC,EADU,KAwBpBC,EAAU,CAAC,EAAG,GAAI,GAAI,IAEtBC,EAAOH,EAAQN,KAAI,SAACC,EAAaR,GAAd,OACvBG,EAAS,GAADH,EAA0Ce,EAAQf,GAAIQ,MAOhE,OACE,6BACE,yBAAKF,MAAO,CAAEW,OAAQ,SACnBD,EACD,8BAAUE,SATC,SAACC,GAChBC,QAAQC,IAAIF,EAAEG,OAAOC,OACrBT,EAAWU,KAAKC,MAAMN,EAAEG,OAAOC,SAOGjB,MAAO,CAAEoB,UAAW,QAASC,MAAO,OAAQC,OAAQ,OAAQC,SAAU,SApBxG,g3BAwBE,uBAAGC,KAAK,wCAAR,8CCtIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.160597f2.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport styled from 'styled-components'\nimport { useState } from 'react';\n\nconst BORDER_WIDTH = 1;\nconst BORDER_COLOR = \"#bbb\"\nconst Box = styled.div`\nborder: solid\nborder-width: ${BORDER_WIDTH}px\nborder-color: ${BORDER_COLOR}\n`\nconst KEYBOX_DEFAULT_SIZE = 60;\nconst KeyBox = styled(Box) < { left: number, color: string }> `\nwidth: ${KEYBOX_DEFAULT_SIZE}px\nheight: ${KEYBOX_DEFAULT_SIZE}px\nposition: absolute;\nbackground: ${props => props.color}\nleft: ${props => props.left}px\n`\n\nconst JA_LETTER_SIZE = 30;\nconst JA_LETTER_FONTSIZE = 30;\nconst JA_LETTER_OFFSET = 5\n\nconst JaLetter = styled.div`\nfont-size: ${JA_LETTER_FONTSIZE}px;\nposition: absolute\nwidth: ${JA_LETTER_SIZE}px\nheight: ${JA_LETTER_SIZE}px\n`\n\nconst JaLeft = styled(JaLetter)`\ntop: ${0 - JA_LETTER_OFFSET}px\nleft: 0px\n`\nconst JaRight = styled(JaLetter)`\ntop: ${0 - JA_LETTER_OFFSET}px\nleft: ${JA_LETTER_SIZE}px\n`\nconst JaBase = styled(JaLetter)`\ntop: ${JA_LETTER_SIZE - JA_LETTER_OFFSET}px\nleft: ${JA_LETTER_SIZE / 2}px\n`\nconst EN_LETTER_OFFSET = 4\n\nconst EnLetter = styled.div`\nfont-size: ${JA_LETTER_FONTSIZE / 2}px;\nposition: absolute\nwidth: ${JA_LETTER_SIZE / 2}px\nheight: ${JA_LETTER_SIZE / 2}px\nborder: solid ${BORDER_WIDTH / 2}px ${BORDER_COLOR}\n`\n\nconst EnShift = styled(EnLetter)`\ntop: ${JA_LETTER_SIZE}px\nleft: ${JA_LETTER_SIZE / 2 * 3}px\n`\nconst EnBase = styled(EnLetter)`\ntop: ${JA_LETTER_SIZE / 2 * 3}px\nleft: ${JA_LETTER_SIZE / 2 * 3}px\n`\nconst EnSpan = styled.span`\nposition: absolute\ntop: ${0 - EN_LETTER_OFFSET}px\ntext-align: center\nwidth: ${JA_LETTER_SIZE / 2}px\n`\n\nconst Row = styled.div`\nposition: relative\nheight: ${KEYBOX_DEFAULT_SIZE}\n`\nconst getLetter = (xs: (string | [string]), i: number) => {\n  if (typeof xs === \"string\") {\n    return xs.charAt(i);\n  }\n  return xs[i];\n}\n\nconst makeKeyBox = (left: number, keytop: string, color: string) => {\n  return (\n    <KeyBox left={left} color={color}>\n      <JaLeft>{getLetter(keytop, 0)}</JaLeft>\n      <JaRight>{getLetter(keytop, 1)}</JaRight>\n      <JaBase>{getLetter(keytop, 2)}</JaBase>\n      <EnShift><EnSpan>{getLetter(keytop, 3)}</EnSpan></EnShift>\n      <EnBase><EnSpan>{getLetter(keytop, 4)}</EnSpan></EnBase>\n    </KeyBox>\n  );\n}\n\nconst KEY_COLOR = [\n  \"#fcc\", \"#fdc\", \"#ffc\", \"#cfc\", \"#cfc\", \"white\", \"#cff\", \"#cff\", \"#cdf\", \"#ccf\", \"#dcf\", \"#dcf\", \"#dcf\"\n]\n\nconst makeRow = (top: number, left: number, keys: string[]) => {\n  return (\n    <Row style={{ top: top }}>\n      {keys.map((x, i) => (makeKeyBox(KEYBOX_DEFAULT_SIZE * i + left, x, KEY_COLOR[i])))}\n    </Row>\n  );\n}\n\nconst App: React.FC = () => {\n  const [rowData, setRowData] = useState(\n    [\n      [\n        \"？！１!1\", \"・ ２@2\", \"〜 ３#3\", \"  ４$4\", \"  ５%5\", \"  ￥{[\", \" ［６^6\", \" ］７&7\", \" （８*8\", \" ）９(9\", \"  ０)0\", \"   |\\\\\", \"\"\n      ],\n      [\n        \"ぁ  Q \", \"え かW \", \"り たE \", \"ゃ こR \", \"れ さT \", \"  「}]\", \"ぱよらY \", \" にちU \", \" るくI \", \" まつO \", \" ぇほ\", \"\"\n      ],\n      [\n        \"を うA \", \"あ しS \", \"な てD \", \"ゅ けF \", \"も せG \", \"  」_-\", \" みはH \", \" おとJ \", \" のきK \", \"ぽょいL \", \" っん:;\", \"  ：\\\"'\"\n      ],\n      [\n        \"ぅ ねZ \", \"ー ひX \", \"ろ すC \", \"や ふV \", \"ぃ へB \", \"  ＿+=\", \"ぷぬめN \", \" ゆそM \", \"ぺむ、<,\", \"ぴわ。>.\", \" ぉ・?/\"\n      ],\n    ]\n  )\n  const originalRowDataString = (\n    '[[\"？！１!1\", \"・ ２@2\", \"〜 ３#3\", \"  ４$4\", \"  ５%5\", \"  ￥{[\", \" ［６^6\", \" ］７&7\", \" （８*8\", \" ）９(9\", \"  ０)0\", \"   |\\\\\\\\\", \"\"],\\n' +\n    ' [\"ぁ  Q \", \"え かW \", \"り たE \", \"ゃ こR \", \"れ さT \", \"  「}]\", \"ぱよらY \", \" にちU \", \" るくI \", \" まつO \", \" ぇほ\", \"\"],\\n' +\n    ' [\"を うA \", \"あ しS \", \"な てD \", \"ゅ けF \", \"も せG \", \"  」_-\", \" みはH \", \" おとJ \", \" のきK \", \"ぽょいL \", \" っん:;\", \"  ：\\\\\"\\'\"],\\n' +\n    ' [\"ぅ ねZ \", \"ー ひX \", \"ろ すC \", \"や ふV \", \"ぃ へB \", \"  ＿+=\", \"ぷぬめN \", \" ゆそM \", \"ぺむ、<,\", \"ぴわ。>.\", \" ぉ・?/\"]]'\n  );\n\n  const offsets = [0, 30, 60, 90]\n\n  const rows = rowData.map((x: string[], i: number) =>\n    makeRow(i * (KEYBOX_DEFAULT_SIZE + BORDER_WIDTH), offsets[i], x)\n  )\n  const onChange = (e: any) => {\n    console.log(e.target.value)\n    setRowData(JSON.parse(e.target.value))\n  }\n\n  return (\n    <div>\n      <div style={{ margin: \"30px\" }}>\n        {rows}\n        <textarea onChange={onChange} style={{ marginTop: \"300px\", width: \"100%\", height: \"10em\", fontSize: \"16px\" }}>\n          {originalRowDataString}\n        </textarea>\n      </div>\n      <a href=\"https://scrapbox.io/nishio/keylayout\">see https://scrapbox.io/nishio/keylayout</a>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}